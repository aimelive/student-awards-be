generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  email        String        @unique
  password     String?
  firstName    String
  lastName     String?
  accountType  AccountType   @default(EMAIL)
  role         Role          @default(USER)
  status       Status        @default(ACTIVE)
  verified     Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  profile      Profile?
  performances Performance[]
  awards       Award[]
  activities   Activity[]
}

model Profile {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String?
  phoneNumber String?
  profilePic  String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique @db.ObjectId
  bio         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Season {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  name         SeasonName
  date         DateTime
  performances Performance[]
  awards       Award[]
}

model Performance {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  season        Season   @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId      String   @unique @db.ObjectId
  featuredPhoto String
  images        String[]
  videoUrl      String
  duration      String
  title         String
  description   String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique @db.ObjectId
}

model Award {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  caption       String
  category      AwardCategory
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String        @unique @db.ObjectId
  season        Season        @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId      String        @unique @db.ObjectId
  featuredPhoto String
  performanceId String?
}

model Activity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  caption   String
  images    String[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum AccountType {
  EMAIL
  GOOGLE
  FACEBOOK
}

enum Status {
  ACTIVE
  IDLE
  DISABLED
  DELETED
}

enum SeasonName {
  SEASON_1
  SEASON_2
  SEASON_3
}

enum AwardCategory {
  Traditional
  Singer
  Dance
  Fashion
}
